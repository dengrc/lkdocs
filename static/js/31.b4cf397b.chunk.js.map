{"version":3,"sources":["../static/js/31.b4cf397b.chunk.js","docs/zh-cn/dojo/md/widgetbase.md"],"names":["webpackJsonp","49","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA","file":"static/js/31.b4cf397b.chunk.js","sourcesContent":["webpackJsonp([31],{\n\n/***/ 49:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## [WidgetBase](https://dojotoolkit.org/reference-guide/1.10/dijit/_WidgetBase.html)\\r\\n\\r\\n### 生命周期\\r\\n\\r\\n* `constructor`\\r\\n* parameters are mixed into the widget instance\\r\\n* postMixInProperties\\r\\n* `buildRendering`\\r\\n* setters are called\\r\\n* postCreate\\r\\n* startup\\r\\n* `destroy`\\r\\n\\r\\n### setter\\r\\n\\r\\n```javascript\\r\\n_setXxxAttr:function(value){\\r\\n    this._set(\\\"xxx\\\",value)\\r\\n}\\r\\n```\\r\\n\\r\\n### getter\\r\\n\\r\\n```javascript\\r\\n_getXxxAttr:function(){\\r\\n    return this.xxx\\r\\n}\\r\\n```\\r\\n\\r\\n示例代码\\r\\n\\r\\n```javascript\\ndefine([\\\"dojo/_base/declare\\\", \\\"dijit/_WidgetBase\\\"], function (declare, _WidgetBase) {\\r\\n    return declare([_WidgetBase], {\\r\\n        name: \\\"11\\\",\\r\\n        constructor: function () {\\r\\n            console.log(\\\"constructor\\\")\\r\\n        },\\r\\n        _setNameAttr: function (value) {\\r\\n            console.log(\\\"setters are called\\\")\\r\\n            this.domNode.textContent = value;\\r\\n            this._set(\\\"name\\\", value);\\r\\n        },\\r\\n        _getNameAttr: function () {\\r\\n            console.log(\\\"getters are called\\\")\\r\\n            return this.name\\r\\n        },\\r\\n        postMixInProperties: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"postMixInProperties\\\");\\r\\n        },\\r\\n        buildRendering: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"buildRendering\\\");\\r\\n        },\\r\\n        postCreate: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"postCreate\\\");\\r\\n        },\\r\\n        startup: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"startup\\\");\\r\\n        },\\r\\n        destroy: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"destroy\\\");\\r\\n        }\\r\\n    });\\r\\n});\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### watch\\r\\n\\r\\n```javascript\\r\\nw.watch(\\\"xxx\\\",function(name, oldValue, value){\\r\\n\\r\\n})\\r\\n```\\r\\n\\r\\n### set\\r\\n\\r\\n```javascript\\r\\nw.set(\\\"xxx\\\",\\\"258\\\")\\r\\n```\\r\\n\\r\\n### get\\r\\n\\r\\n```javascript\\r\\nw.get(\\\"xxx\\\")\\r\\n```\\r\\n\\r\\n### on\\r\\n\\r\\n给当前组件 domNode 绑定事件,回调函数中 this 指向 domNode\\r\\n\\r\\n```javascript\\r\\nw.on(\\\"click\\\",function(){})\\r\\n```\\r\\n\\r\\n### emit\\r\\n\\r\\n发布前组件 domNode 事件\\r\\n\\r\\n```javascript\\r\\nw.emit(\\\"click\\\",{detail:{data:{a:1}}},)\\r\\n```\\r\\n### connect\\r\\n\\r\\n给任何对象绑定事件，回调函数中 this 指向 当前组件\\r\\n\\r\\n```javascript\\r\\nw.connect(this.domNode.querySelector('input'),\\\"input\\\",function(){})\\r\\n```\\r\\n\\r\\n### subscribe\\r\\n\\r\\n订阅消息\\r\\n\\r\\n```javascript\\r\\nw.subscribe(\\\"config.update\\\", function(){\\r\\n\\r\\n})\\r\\n```\\r\\n\\r\\n示例代码\\r\\n\\r\\n```javascript\\n﻿define([\\r\\n    \\\"dojo/_base/declare\\\",\\r\\n    \\\"desktop/application/ViewBase\\\",\\r\\n    \\\"dojo/topic\\\",\\r\\n    \\\"dojo/text!./WidgetMethods.html\\\"\\r\\n], function (declare, ViewBase, topic, templace) {\\r\\n    return declare([ViewBase], {\\r\\n        templateString: templace,\\r\\n        name: \\\"1\\\",\\r\\n        onRendered: function () {\\r\\n            this.inherited(arguments);\\r\\n            //用 on 方法绑定事件\\r\\n            this.btn.on(\\\"click\\\", function () {\\r\\n                console.log(this);\\r\\n            });\\r\\n            //用 connect 方法绑定事件\\r\\n            this.btn.connect(this.btn2.domNode, \\\"click\\\", function () {\\r\\n                //发布消息\\r\\n                topic.publish(\\\"btn.click\\\", 123)\\r\\n            });\\r\\n            //订阅消息\\r\\n            this.wtest.subscribe(\\\"btn.click\\\", function (e) {\\r\\n                debugger\\r\\n            });\\r\\n            //视察属性值更新\\r\\n            this.wtest.watch(\\\"name\\\", function (type, oldValue, newValue) {\\r\\n                debugger\\r\\n            })\\r\\n        }\\r\\n    })\\r\\n});\\n```\\r\\n\\r\\n### own\\r\\n\\r\\n跟踪指定的句柄并在销毁此实例时删除/销毁它们，除非它们是已经手动删除/销毁\\r\\n\\r\\n**应用场景**\\r\\n\\r\\n* 控件销毁时 取消数据请求\\r\\n* 控件销毁时 取消 dojo/on 事件绑定, 可以减少内存泄漏\\r\\n```javascript\\ndefine([\\r\\n    \\\"dojo/_base/declare\\\",\\r\\n    \\\"desktop/application/ViewBase\\\",\\r\\n    \\\"biz/lkstore/request\\\",\\r\\n    \\\"dojo/_base/lang\\\",\\r\\n    \\\"dojo/on\\\",\\r\\n    \\\"dojo/text!./own.html\\\"\\r\\n], function (declare, ViewBase, request, lang, on) {\\r\\n    return declare([ViewBase], {\\r\\n        buildRendering: function () {\\r\\n            this.inherited(arguments);\\r\\n            //当控件销毁时这个事件会自动解绑\\r\\n            this.own(on(document.body, \\\"click\\\", function () {\\r\\n                console.log(this)\\r\\n            }));\\r\\n            //下面这种更好\\r\\n            //当控件销毁时这个事件会自动解绑\\r\\n            //回调函数中 的 this 指向 当前控件\\r\\n            this.connect(document.body, \\\"click\\\", function () {\\r\\n                console.log(this)\\r\\n            })\\r\\n        },\\r\\n        /**\\r\\n         * 如果在数据返回之前 销毁了控件 回调里面会报错\\r\\n         */\\r\\n        query1: function () {\\r\\n            request(\\\"CC.ERP.BLL.SysConfig.GetConfig\\\", {}).then(lang.hitch(function (result) {\\r\\n                this.domNode.innerHTML = JSON.stringify(result)\\r\\n            }))\\r\\n        },\\r\\n        /**\\r\\n         *  如果在数据返回之前 销毁了控件 请求会取消回调不会执行\\r\\n         */\\r\\n        query2: function () {\\r\\n            this.own(request(\\\"CC.ERP.BLL.SysConfig.GetConfig\\\", {}).then(lang.hitch(function (result) {\\r\\n                this.domNode.innerHTML = JSON.stringify(result)\\r\\n            })))\\r\\n        }\\r\\n    })\\r\\n});\\n```\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/31.b4cf397b.chunk.js","module.exports = \"## [WidgetBase](https://dojotoolkit.org/reference-guide/1.10/dijit/_WidgetBase.html)\\r\\n\\r\\n### 生命周期\\r\\n\\r\\n* `constructor`\\r\\n* parameters are mixed into the widget instance\\r\\n* postMixInProperties\\r\\n* `buildRendering`\\r\\n* setters are called\\r\\n* postCreate\\r\\n* startup\\r\\n* `destroy`\\r\\n\\r\\n### setter\\r\\n\\r\\n```javascript\\r\\n_setXxxAttr:function(value){\\r\\n    this._set(\\\"xxx\\\",value)\\r\\n}\\r\\n```\\r\\n\\r\\n### getter\\r\\n\\r\\n```javascript\\r\\n_getXxxAttr:function(){\\r\\n    return this.xxx\\r\\n}\\r\\n```\\r\\n\\r\\n示例代码\\r\\n\\r\\n```javascript\\ndefine([\\\"dojo/_base/declare\\\", \\\"dijit/_WidgetBase\\\"], function (declare, _WidgetBase) {\\r\\n    return declare([_WidgetBase], {\\r\\n        name: \\\"11\\\",\\r\\n        constructor: function () {\\r\\n            console.log(\\\"constructor\\\")\\r\\n        },\\r\\n        _setNameAttr: function (value) {\\r\\n            console.log(\\\"setters are called\\\")\\r\\n            this.domNode.textContent = value;\\r\\n            this._set(\\\"name\\\", value);\\r\\n        },\\r\\n        _getNameAttr: function () {\\r\\n            console.log(\\\"getters are called\\\")\\r\\n            return this.name\\r\\n        },\\r\\n        postMixInProperties: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"postMixInProperties\\\");\\r\\n        },\\r\\n        buildRendering: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"buildRendering\\\");\\r\\n        },\\r\\n        postCreate: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"postCreate\\\");\\r\\n        },\\r\\n        startup: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"startup\\\");\\r\\n        },\\r\\n        destroy: function () {\\r\\n            this.inherited(arguments);\\r\\n            console.log(\\\"destroy\\\");\\r\\n        }\\r\\n    });\\r\\n});\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### watch\\r\\n\\r\\n```javascript\\r\\nw.watch(\\\"xxx\\\",function(name, oldValue, value){\\r\\n\\r\\n})\\r\\n```\\r\\n\\r\\n### set\\r\\n\\r\\n```javascript\\r\\nw.set(\\\"xxx\\\",\\\"258\\\")\\r\\n```\\r\\n\\r\\n### get\\r\\n\\r\\n```javascript\\r\\nw.get(\\\"xxx\\\")\\r\\n```\\r\\n\\r\\n### on\\r\\n\\r\\n给当前组件 domNode 绑定事件,回调函数中 this 指向 domNode\\r\\n\\r\\n```javascript\\r\\nw.on(\\\"click\\\",function(){})\\r\\n```\\r\\n\\r\\n### emit\\r\\n\\r\\n发布前组件 domNode 事件\\r\\n\\r\\n```javascript\\r\\nw.emit(\\\"click\\\",{detail:{data:{a:1}}},)\\r\\n```\\r\\n### connect\\r\\n\\r\\n给任何对象绑定事件，回调函数中 this 指向 当前组件\\r\\n\\r\\n```javascript\\r\\nw.connect(this.domNode.querySelector('input'),\\\"input\\\",function(){})\\r\\n```\\r\\n\\r\\n### subscribe\\r\\n\\r\\n订阅消息\\r\\n\\r\\n```javascript\\r\\nw.subscribe(\\\"config.update\\\", function(){\\r\\n\\r\\n})\\r\\n```\\r\\n\\r\\n示例代码\\r\\n\\r\\n```javascript\\n﻿define([\\r\\n    \\\"dojo/_base/declare\\\",\\r\\n    \\\"desktop/application/ViewBase\\\",\\r\\n    \\\"dojo/topic\\\",\\r\\n    \\\"dojo/text!./WidgetMethods.html\\\"\\r\\n], function (declare, ViewBase, topic, templace) {\\r\\n    return declare([ViewBase], {\\r\\n        templateString: templace,\\r\\n        name: \\\"1\\\",\\r\\n        onRendered: function () {\\r\\n            this.inherited(arguments);\\r\\n            //用 on 方法绑定事件\\r\\n            this.btn.on(\\\"click\\\", function () {\\r\\n                console.log(this);\\r\\n            });\\r\\n            //用 connect 方法绑定事件\\r\\n            this.btn.connect(this.btn2.domNode, \\\"click\\\", function () {\\r\\n                //发布消息\\r\\n                topic.publish(\\\"btn.click\\\", 123)\\r\\n            });\\r\\n            //订阅消息\\r\\n            this.wtest.subscribe(\\\"btn.click\\\", function (e) {\\r\\n                debugger\\r\\n            });\\r\\n            //视察属性值更新\\r\\n            this.wtest.watch(\\\"name\\\", function (type, oldValue, newValue) {\\r\\n                debugger\\r\\n            })\\r\\n        }\\r\\n    })\\r\\n});\\n```\\r\\n\\r\\n### own\\r\\n\\r\\n跟踪指定的句柄并在销毁此实例时删除/销毁它们，除非它们是已经手动删除/销毁\\r\\n\\r\\n**应用场景**\\r\\n\\r\\n* 控件销毁时 取消数据请求\\r\\n* 控件销毁时 取消 dojo/on 事件绑定, 可以减少内存泄漏\\r\\n```javascript\\ndefine([\\r\\n    \\\"dojo/_base/declare\\\",\\r\\n    \\\"desktop/application/ViewBase\\\",\\r\\n    \\\"biz/lkstore/request\\\",\\r\\n    \\\"dojo/_base/lang\\\",\\r\\n    \\\"dojo/on\\\",\\r\\n    \\\"dojo/text!./own.html\\\"\\r\\n], function (declare, ViewBase, request, lang, on) {\\r\\n    return declare([ViewBase], {\\r\\n        buildRendering: function () {\\r\\n            this.inherited(arguments);\\r\\n            //当控件销毁时这个事件会自动解绑\\r\\n            this.own(on(document.body, \\\"click\\\", function () {\\r\\n                console.log(this)\\r\\n            }));\\r\\n            //下面这种更好\\r\\n            //当控件销毁时这个事件会自动解绑\\r\\n            //回调函数中 的 this 指向 当前控件\\r\\n            this.connect(document.body, \\\"click\\\", function () {\\r\\n                console.log(this)\\r\\n            })\\r\\n        },\\r\\n        /**\\r\\n         * 如果在数据返回之前 销毁了控件 回调里面会报错\\r\\n         */\\r\\n        query1: function () {\\r\\n            request(\\\"CC.ERP.BLL.SysConfig.GetConfig\\\", {}).then(lang.hitch(function (result) {\\r\\n                this.domNode.innerHTML = JSON.stringify(result)\\r\\n            }))\\r\\n        },\\r\\n        /**\\r\\n         *  如果在数据返回之前 销毁了控件 请求会取消回调不会执行\\r\\n         */\\r\\n        query2: function () {\\r\\n            this.own(request(\\\"CC.ERP.BLL.SysConfig.GetConfig\\\", {}).then(lang.hitch(function (result) {\\r\\n                this.domNode.innerHTML = JSON.stringify(result)\\r\\n            })))\\r\\n        }\\r\\n    })\\r\\n});\\n```\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/dojo/md/widgetbase.md\n// module id = 49\n// module chunks = 31"],"sourceRoot":""}